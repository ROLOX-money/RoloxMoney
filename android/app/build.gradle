def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader -> localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

//Signing APK
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

if (project.hasProperty("local.signing")) {
    apply from: getSigningFile()
}

def getSigningFile() {
    return project.property("local.signing");
}

def apkNamePrefix = "RoloxMoney"
def majorNumber = "1"
if (flutterVersionName != null) {
    majorNumber = flutterVersionName
}
def sprintNumber = "0"

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libfbjni.so'
    }
    defaultConfig {
        applicationId "com.rolox"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        android.applicationVariants.all { variant ->
            variant.outputs.all {
                def displayVersionName = versionName + "." + sprintNumber + "." + flutterVersionCode != null ? flutterVersionCode : 1
                def date = getDate()
                def modifiedApkName = apkNamePrefix + "-" + displayVersionName + "-" + variant.flavorName + "-" + variant.buildType.name + "-" + date + ".apk"
                outputFileName = modifiedApkName
                def fullVersionName = versionName + "." + sprintNumber
                buildConfigField("String", "displayVersionName", "\"" + displayVersionName + "\"")
                buildConfigField("String", "fullVersionName", "\"" + fullVersionName + "\"")
            }
        }
    }

    buildTypes {
        def CHARACTER = "Character"
        def XPOSELEVEL = "exposeLevel"
        debug {
            signingConfig signingConfigs.debug
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField(CHARACTER, XPOSELEVEL, "null")
            signingConfig signingConfigs.release
            shrinkResources true
            minifyEnabled true
            debuggable false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "default"
    productFlavors {
        dev {
            //com.rolox.money.dev
            applicationIdSuffix ".money.dev"
        }
        uat {
            applicationIdSuffix ".money.uat"
        }
        prod {
            applicationIdSuffix ".money.dev"
        }
    }
    sourceSets.main {
        jniLibs.srcDir 'libs'
        jni.srcDirs = [] //disable automatic ndk-build call
    }
}

flutter {
    source '../..'
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

dependencies {
    implementation "com.google.android.gms:play-services-auth:$play_services_auth"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
